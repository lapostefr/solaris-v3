const l={mounted(t,i){if(i.value!==!0)return;const e=t,n=r(e).first,o=r(e).last;t.firstKeyDown=s=>{s.shiftKey&&s.key==="Tab"&&(s.preventDefault(),o.focus())},t.lastKeyDown=s=>{!s.shiftKey&&s.key==="Tab"&&(s.preventDefault(),n.focus())},n&&n.addEventListener("keydown",t.firstKeyDown),o&&o.addEventListener("keydown",t.lastKeyDown)},initFocus:t=>{const i=t;if(i){const e=r(i).first;e&&e.focus()}},unmounted(t,i){if(i.value!==!0)return;const e=t,n=r(e).first,o=r(e).last;n&&n.removeEventListener("keydown",t.firstKeyDown),o&&o.removeEventListener("keydown",t.lastKeyDown)}},r=t=>{const e=Array.from(t.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')).filter(s=>{const f=window.getComputedStyle(s);return f.display!=="none"&&f.visibility!=="hidden"}),n=e[0],o=e[e.length-1];return{first:n,last:o,list:e}},a=Object.freeze(Object.defineProperty({__proto__:null,default:l},Symbol.toStringTag,{value:"Module"}));export{a as _,l as f};
